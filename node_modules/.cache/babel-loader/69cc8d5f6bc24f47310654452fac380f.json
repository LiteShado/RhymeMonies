{"ast":null,"code":"var _jsxFileName = \"/Users/NatRichmond/LiteShado, Inc./General Assembly/RhymeMonies/RhymeMonies-frontend/rhymemonies/src/pages/MySongs.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport axios from 'axios'; // import Music from '../components/Music'\n// import '../css/Music.css'\n\nimport env from 'react-dotenv';\nimport SongChoice from '../pages/SongChoice';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MySongs = () => {\n  _s();\n\n  const [allSongs, setAllSongs] = useState(null);\n\n  const getAllSongs = async () => {\n    try {\n      const res = await axios.get(`${env.API_URL}/songs`);\n      setAllSongs(res.data);\n      console.log(res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getAllSongs();\n  }, []);\n\n  const getUserSongs = async () => {\n    try {\n      const res = await axios.get(`${env.API_URL}/songs/`);\n      setAllSongs(res.data);\n      console.log(res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getUserSongs();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Check Out These from the Community!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Title | Genre\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), allSongs && allSongs.map((res, i) => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/songs/${res.id}`,\n          className: \"communitySongs\",\n          children: [/*#__PURE__*/_jsxDEV(SongChoice, {\n            song: res,\n            userId: res.userId,\n            preview: \"true\",\n            placeholder: res.title\n          }, res.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this), res.title, \" | \", res.genre]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this)\n      }, res.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true);\n};\n\n_s(MySongs, \"Z8OIb0xEz24xGwk3nzdxQTAGAeQ=\");\n\n_c = MySongs;\nexport default MySongs;\n\nvar _c;\n\n$RefreshReg$(_c, \"MySongs\");","map":{"version":3,"sources":["/Users/NatRichmond/LiteShado, Inc./General Assembly/RhymeMonies/RhymeMonies-frontend/rhymemonies/src/pages/MySongs.js"],"names":["useEffect","useState","axios","env","SongChoice","Link","MySongs","allSongs","setAllSongs","getAllSongs","res","get","API_URL","data","console","log","error","getUserSongs","map","i","id","userId","title","genre"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAASC,IAAT,QAAqB,kBAArB;;;;AAGA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAElB,QAAK,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,IAAD,CAAvC;;AAGA,QAAMQ,WAAW,GAAG,YAAW;AACvB,QAAI;AACJ,YAAMC,GAAG,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAER,GAAG,CAACS,OAAQ,QAAzB,CAAlB;AACAJ,MAAAA,WAAW,CAACE,GAAG,CAACG,IAAL,CAAX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACG,IAAhB;AACC,KAJD,CAIE,OAAOG,KAAP,EAAc;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH;AACR,GARD;;AAUAhB,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,WAAW;AACd,GAFQ,EAEP,EAFO,CAAT;;AAIA,QAAMQ,YAAY,GAAG,YAAW;AACxB,QAAI;AACJ,YAAMP,GAAG,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAER,GAAG,CAACS,OAAQ,SAAzB,CAAlB;AACAJ,MAAAA,WAAW,CAACE,GAAG,CAACG,IAAL,CAAX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACG,IAAhB;AACC,KAJD,CAIE,OAAOG,KAAP,EAAc;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH;AACR,GARD;;AAUAhB,EAAAA,SAAS,CAAC,MAAM;AACZiB,IAAAA,YAAY;AACf,GAFQ,EAEP,EAFO,CAAT;AAIA,sBACI;AAAA,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA,EAGCV,QAAQ,IAAIA,QAAQ,CAACW,GAAT,CAAa,CAACR,GAAD,EAAMS,CAAN,KAAY;AACtC,0BACI;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,EAAE,EAAG,UAAST,GAAG,CAACU,EAAG,EAA3B;AAA8B,UAAA,SAAS,EAAC,gBAAxC;AAAA,kCACA,QAAC,UAAD;AAEA,YAAA,IAAI,EAAEV,GAFN;AAGA,YAAA,MAAM,EAAEA,GAAG,CAACW,MAHZ;AAIA,YAAA,OAAO,EAAC,MAJR;AAKA,YAAA,WAAW,EAAEX,GAAG,CAACY;AALjB,aACKZ,GAAG,CAACU,EADT;AAAA;AAAA;AAAA;AAAA,kBADA,EAQCV,GAAG,CAACY,KARL,SAQeZ,GAAG,CAACa,KARnB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,SAASb,GAAG,CAACU,EAAb;AAAA;AAAA;AAAA;AAAA,cADJ;AAaM,KAdO,CAHb;AAAA,kBADJ;AAsBH,CAvDD;;GAAMd,O;;KAAAA,O;AAwDN,eAAeA,OAAf","sourcesContent":["import {useEffect, useState} from 'react'\nimport axios from 'axios'\n// import Music from '../components/Music'\n// import '../css/Music.css'\nimport env from 'react-dotenv'\nimport SongChoice from '../pages/SongChoice'\nimport { Link } from 'react-router-dom'\n\n\nconst MySongs = () => {\n\n    const[allSongs, setAllSongs] = useState(null)\n\n\n    const getAllSongs = async() => {\n            try {\n            const res = await axios.get(`${env.API_URL}/songs`)\n            setAllSongs(res.data)\n            console.log(res.data)\n            } catch (error) {\n                console.log(error)\n            }\n    }\n\n    useEffect(() => {\n        getAllSongs()\n    },[])\n\n    const getUserSongs = async() => {\n            try {\n            const res = await axios.get(`${env.API_URL}/songs/`)\n            setAllSongs(res.data)\n            console.log(res.data)\n            } catch (error) {\n                console.log(error)\n            }\n    }\n\n    useEffect(() => {\n        getUserSongs()\n    },[])\n\n    return (\n        <>\n        <h1>Check Out These from the Community!</h1>\n        <h3>Title | Genre</h3>\n        {allSongs && allSongs.map((res, i) => {\n        return (\n            <li key={res.id}>\n                <Link to={`/songs/${res.id}`} className=\"communitySongs\">\n                <SongChoice\n                key={res.id}\n                song={res}\n                userId={res.userId}\n                preview=\"true\"\n                placeholder={res.title}\n                />\n                {res.title} | {res.genre}</Link>\n            </li>\n\n            )})\n        }\n        </>\n    )\n}\nexport default MySongs\n"]},"metadata":{},"sourceType":"module"}