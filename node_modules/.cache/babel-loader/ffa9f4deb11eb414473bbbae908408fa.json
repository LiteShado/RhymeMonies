{"ast":null,"code":"var _jsxFileName = \"/Users/NatRichmond/LiteShado, Inc./General Assembly/RhymeMonies/RhymeMonies-frontend/rhymemonies/src/pages/MySongs.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useContext } from 'react';\nimport axios from 'axios'; // import Music from '../components/Music'\n// import '../css/Music.css'\n\nimport env from 'react-dotenv';\nimport SongChoice from '../pages/SongChoice';\nimport { Link } from 'react-router-dom';\nimport { UserContext } from '../context/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MySongs = props => {\n  _s();\n\n  // const[allSongs, setAllSongs] = useState(null)\n  // const userId = localStorage.getItem('userId', userId)\n  const {\n    userState\n  } = useContext(UserContext);\n  const [allSongs, setAllSongs] = useState(null); // const id = localStorage.getItem('userId', userId)\n\n  const getAllSongs = async () => {\n    try {\n      const res = await axios.get(`${env.API_URL}/songs/user`);\n      console.log(res);\n      let i;\n      const array = res.data.songs;\n      setAllSongs(res.data);\n      console.log(res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getAllSongs();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Here Are Your Songs!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), allSongs && allSongs.map((res, i) => {\n      console.log(res);\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/songs/${res.id}`,\n          className: \"userSongs\",\n          children: [/*#__PURE__*/_jsxDEV(SongChoice, {\n            song: res.title // userId={allUserSongs.userId}\n            // preview=\"true\"\n            // placeholder={allUserSongs.title}\n\n          }, res.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this), allSongs.title, \" | \", allSongs.genre]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this)\n      }, res.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true);\n};\n\n_s(MySongs, \"cxooSLOR2iTUM9emd+rkFPcRtqM=\");\n\n_c = MySongs;\nexport default MySongs;\n\nvar _c;\n\n$RefreshReg$(_c, \"MySongs\");","map":{"version":3,"sources":["/Users/NatRichmond/LiteShado, Inc./General Assembly/RhymeMonies/RhymeMonies-frontend/rhymemonies/src/pages/MySongs.js"],"names":["useEffect","useState","useContext","axios","env","SongChoice","Link","UserContext","MySongs","props","userState","allSongs","setAllSongs","getAllSongs","res","get","API_URL","console","log","i","array","data","songs","error","map","id","title","genre"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,EAA6BC,UAA7B,QAA8C,OAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAAQC,WAAR,QAA0B,wBAA1B;;;;AAIA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AAEvB;AACA;AACA,QAAM;AAACC,IAAAA;AAAD,MAAcR,UAAU,CAACK,WAAD,CAA9B;AACA,QAAK,CAACI,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,IAAD,CAAvC,CALuB,CAOvB;;AAEA,QAAMY,WAAW,GAAG,YAAW;AAC3B,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAW,GAAEX,GAAG,CAACY,OAAQ,aAAzB,CAAlB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AAEA,UAAIK,CAAJ;AAEA,YAAMC,KAAK,GAAGN,GAAG,CAACO,IAAJ,CAASC,KAAvB;AAEAV,MAAAA,WAAW,CAACE,GAAG,CAACO,IAAL,CAAX;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACO,IAAhB;AAEC,KAXL,CAWM,OAAOE,KAAP,EAAc;AAChBN,MAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACC;AACR,GAfD;;AAiBAvB,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,WAAW;AACd,GAFQ,EAEP,EAFO,CAAT;AAIA,sBACI;AAAA,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,EAGCF,QAAQ,IAAIA,QAAQ,CAACa,GAAT,CAAa,CAACV,GAAD,EAAMK,CAAN,KAAY;AAClCF,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACJ,0BACI;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,EAAE,EAAG,UAASA,GAAG,CAACW,EAAG,EAA3B;AACA,UAAA,SAAS,EAAC,WADV;AAAA,kCAEA,QAAC,UAAD;AAEA,YAAA,IAAI,EAAEX,GAAG,CAACY,KAFV,CAGA;AACA;AACA;;AALA,aACKZ,GAAG,CAACW,EADT;AAAA;AAAA;AAAA;AAAA,kBAFA,EASCd,QAAQ,CAACe,KATV,SASoBf,QAAQ,CAACgB,KAT7B;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,SAASb,GAAG,CAACW,EAAb;AAAA;AAAA;AAAA;AAAA,cADJ;AAeM,KAjBO,CAHb;AAAA,kBADJ;AA0BH,CAxDD;;GAAMjB,O;;KAAAA,O;AA4DN,eAAeA,OAAf","sourcesContent":["import {useEffect, useState, useContext} from 'react'\nimport axios from 'axios'\n// import Music from '../components/Music'\n// import '../css/Music.css'\nimport env from 'react-dotenv'\nimport SongChoice from '../pages/SongChoice'\nimport { Link } from 'react-router-dom'\nimport {UserContext} from '../context/UserContext'\n\n\n\nconst MySongs = (props) => {\n\n    // const[allSongs, setAllSongs] = useState(null)\n    // const userId = localStorage.getItem('userId', userId)\n    const {userState} = useContext(UserContext)\n    const[allSongs, setAllSongs] = useState(null)\n\n    // const id = localStorage.getItem('userId', userId)\n\n    const getAllSongs = async() => {\n        try {\n            const res = await axios.get(`${env.API_URL}/songs/user`)\n            console.log(res)\n\n            let i\n\n            const array = res.data.songs\n\n            setAllSongs(res.data)\n            console.log(res.data)\n\n            } catch (error) {\n            console.log(error)\n            }\n    }\n\n    useEffect(() => {\n        getAllSongs()\n    },[])\n\n    return (\n        <>\n        <h1>Here Are Your Songs!!</h1>\n\n        {allSongs && allSongs.map((res, i) => {\n            console.log(res)\n        return (\n            <li key={res.id}>\n                <Link to={`/songs/${res.id}`}\n                className=\"userSongs\">\n                <SongChoice\n                key={res.id}\n                song={res.title}\n                // userId={allUserSongs.userId}\n                // preview=\"true\"\n                // placeholder={allUserSongs.title}\n                />\n                {allSongs.title} | {allSongs.genre}</Link>\n\n            </li>\n\n            )})\n        }\n        </>\n    )\n\n}\n\n\n\nexport default MySongs\n"]},"metadata":{},"sourceType":"module"}